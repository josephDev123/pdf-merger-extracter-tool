name: Deploy to EC2

on:
  push:
    branches:
      - master

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Create .env File for backend Docker
        run: |
          echo "Creating .env file inside api/ directory..."
          mkdir -p api  # Ensure the api directory exists
          echo "PORT=${{ secrets.PORT }}" >> api/.env
          echo "CLOUDFRONT_URL=${{ secrets.CLOUDFRONT_URL }}" >> api/.env
          echo "AWS_ACCESS_KEY=${{ secrets.AWS_ACCESS_KEY }}" >> api/.env
          echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> api/.env
          echo "Generated .env file:"
          cat api/.env  # Print for debugging

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker Images
        run: |
          echo "Building Docker Images..."
          docker build -t myapp-frontend ./client
          docker build -t myapp-backend ./api

      - name: Verify Docker Images
        run: |
          echo "Checking available Docker images..."
          docker images  # List all built images for debugging

      - name: Save Docker Images as Tar Files
        run: |
          echo "Saving Docker images to .tar files..."
          docker save -o myapp-frontend.tar myapp-frontend || echo "Failed to save frontend image"
          docker save -o myapp-backend.tar myapp-backend || echo "Failed to save backend image"

      - name: Verify .tar Files
        run: |
          echo "Checking if .tar files were created..."
          ls -lh myapp-frontend.tar myapp-backend.tar || echo "Tar files not found!"
          file myapp-frontend.tar myapp-backend.tar || echo "Invalid tar files!"

      - name: Set Permissions
        run: chmod 644 myapp-frontend.tar myapp-backend.tar

      - name: Create Target Directory on EC2
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            sudo mkdir -p /var/www/myApps
            # sudo mkdir -p /var/www/myApps/api
            sudo chown $USER:$USER /var/www/myApps

      - name: Copy Docker Images & Compose File to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "myapp-frontend.tar,myapp-backend.tar,docker-compose.yml"
          target: "/var/www/myApps"
          debug: true

      - name: Deploy on EC2
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cd /var/www/myApps
            sudo docker load -i myapp-frontend.tar || echo "Failed to load frontend image"
            sudo docker load -i myapp-backend.tar || echo "Failed to load backend image"

            # Stop and remove existing containers if they exist
            sudo docker stop pdf-client-container || true
            sudo docker rm pdf-client-container || true
            sudo docker stop pdf-backend-container || true
            sudo docker rm pdf-backend-container || true

            # Run new containers
            docker run -d -e VITE_BASE_API_URL=http://16.16.215.2:4000/api/ --name pdf-client-container -p 3000:8080 myapp-frontend
            docker run -d --name pdf-backend-container -p 4000:5000 myapp-backend


            # docker run -d -e VITE_BASE_API_URL=http://16.16.215.2:4000/api/ --name pdf-client-container -p 3000:8080 myapp-frontend
            # docker run -d --name pdf-backend-container -p 4000:5000  myapp-backend
